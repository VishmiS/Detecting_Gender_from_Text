{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPyDa6QKdALzaqSec8UHxFB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Step 1: Load the Dataset from Excel and Handle Missing Values"],"metadata":{"id":"QEtLqWRXNHYa"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MDQRS08wIAxz","executionInfo":{"status":"ok","timestamp":1718460037556,"user_tz":-120,"elapsed":8458,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"64c8bc4c-ae76-4e31-8ec2-b74fc8355975"},"outputs":[{"output_type":"stream","name":"stdout","text":["1 0\n"]}],"source":["import pandas as pd\n","\n","# Load the dataset\n","preprocessed_data = pd.read_excel('preprocessed_data.xlsx')\n","# dataset has columns named 'text' and 'gender'\n","tweets = preprocessed_data['text']\n","labels = preprocessed_data['gender']\n","\n","# Check for missing values\n","print(tweets.isnull().sum(), labels.isnull().sum())\n","\n","# Option 1: Remove rows with missing values\n","preprocessed_data.dropna(subset=['text', 'gender'], inplace=True)\n","\n","# Option 2: Fill missing values with a placeholder text\n","# preprocessed_data['text'].fillna('missing', inplace=True)\n","# preprocessed_data['gender'].fillna('missing', inplace=True)\n","\n","# Reassign tweets and labels after handling missing values\n","tweets = preprocessed_data['text']\n","labels = preprocessed_data['gender']"]},{"cell_type":"markdown","source":["## Step 2: Split the Dataset"],"metadata":{"id":"hJx_LoghLNiu"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Split the dataset into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(tweets, labels, test_size=0.2, random_state=42)\n"],"metadata":{"id":"0_YacKhvLKQq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Step 3: Feature Extraction with Bag of Words (BoW) and TF-IDF"],"metadata":{"id":"CoEwl8JLMiEa"}},{"cell_type":"code","source":["from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n","\n","# Initialize the CountVectorizer\n","vectorizer_bow = CountVectorizer()\n","\n","# Fit and transform the training data\n","X_train_bow = vectorizer_bow.fit_transform(X_train)\n","\n","# Transform the test data\n","X_test_bow = vectorizer_bow.transform(X_test)\n","\n","\n","# Initialize the TfidfVectorizer\n","vectorizer_tfidf = TfidfVectorizer()\n","\n","# Fit and transform the training data\n","X_train_tfidf = vectorizer_tfidf.fit_transform(X_train)\n","\n","# Transform the test data\n","X_test_tfidf = vectorizer_tfidf.transform(X_test)"],"metadata":{"id":"zJIwB_i4Mim6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Step 4: Train and Evaluate Models"],"metadata":{"id":"SpdiCw-JNCqJ"}},{"cell_type":"markdown","source":["1. Naive Bayes Classifier (NBC)"],"metadata":{"id":"Z_-GbNxnRor8"}},{"cell_type":"code","source":["from sklearn.naive_bayes import MultinomialNB\n","from sklearn.metrics import classification_report\n","\n","# Using BoW Features\n","nb_bow = MultinomialNB()\n","nb_bow.fit(X_train_bow, y_train)\n","y_pred_nb_bow = nb_bow.predict(X_test_bow)\n","print(\"Naive Bayes (BoW) Classification Report:\")\n","print(classification_report(y_test, y_pred_nb_bow))\n","\n","# Using TF-IDF Features\n","nb_tfidf = MultinomialNB()\n","nb_tfidf.fit(X_train_tfidf, y_train)\n","y_pred_nb_tfidf = nb_tfidf.predict(X_test_tfidf)\n","print(\"Naive Bayes (TF-IDF) Classification Report:\")\n","print(classification_report(y_test, y_pred_nb_tfidf))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6TwXSTqtRtMw","executionInfo":{"status":"ok","timestamp":1718461329619,"user_tz":-120,"elapsed":283,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"4cc3671b-35cc-465b-9b43-868c5c8f3524"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Naive Bayes (BoW) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.67      0.73      0.70      1353\n","           1       0.66      0.60      0.63      1187\n","\n","    accuracy                           0.67      2540\n","   macro avg       0.66      0.66      0.66      2540\n","weighted avg       0.67      0.67      0.66      2540\n","\n","Naive Bayes (TF-IDF) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.66      0.78      0.71      1353\n","           1       0.68      0.54      0.60      1187\n","\n","    accuracy                           0.67      2540\n","   macro avg       0.67      0.66      0.66      2540\n","weighted avg       0.67      0.67      0.66      2540\n","\n"]}]},{"cell_type":"markdown","source":["2. Logistic Regression (LR)"],"metadata":{"id":"e6662onYRw7_"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","\n","# Using BoW Features\n","lr_bow = LogisticRegression(max_iter=1000)\n","lr_bow.fit(X_train_bow, y_train)\n","y_pred_lr_bow = lr_bow.predict(X_test_bow)\n","print(\"Logistic Regression (BoW) Classification Report:\")\n","print(classification_report(y_test, y_pred_lr_bow))\n","\n","# Using TF-IDF Features\n","lr_tfidf = LogisticRegression(max_iter=1000)\n","lr_tfidf.fit(X_train_tfidf, y_train)\n","y_pred_lr_tfidf = lr_tfidf.predict(X_test_tfidf)\n","print(\"Logistic Regression (TF-IDF) Classification Report:\")\n","print(classification_report(y_test, y_pred_lr_tfidf))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VdTdYiSWRyne","executionInfo":{"status":"ok","timestamp":1718461356444,"user_tz":-120,"elapsed":6106,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"323231bb-0063-4c91-9127-54f5ac6710d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Logistic Regression (BoW) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.66      0.69      0.67      1353\n","           1       0.63      0.60      0.61      1187\n","\n","    accuracy                           0.64      2540\n","   macro avg       0.64      0.64      0.64      2540\n","weighted avg       0.64      0.64      0.64      2540\n","\n","Logistic Regression (TF-IDF) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.68      0.71      0.69      1353\n","           1       0.65      0.61      0.63      1187\n","\n","    accuracy                           0.66      2540\n","   macro avg       0.66      0.66      0.66      2540\n","weighted avg       0.66      0.66      0.66      2540\n","\n"]}]},{"cell_type":"markdown","source":["3. Decision Tree (DT)"],"metadata":{"id":"4S7MTV-wR2Kf"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","\n","# Using BoW Features\n","dt_bow = DecisionTreeClassifier()\n","dt_bow.fit(X_train_bow, y_train)\n","y_pred_dt_bow = dt_bow.predict(X_test_bow)\n","print(\"Decision Tree (BoW) Classification Report:\")\n","print(classification_report(y_test, y_pred_dt_bow))\n","\n","# Using TF-IDF Features\n","dt_tfidf = DecisionTreeClassifier()\n","dt_tfidf.fit(X_train_tfidf, y_train)\n","y_pred_dt_tfidf = dt_tfidf.predict(X_test_tfidf)\n","print(\"Decision Tree (TF-IDF) Classification Report:\")\n","print(classification_report(y_test, y_pred_dt_tfidf))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AR0gEivSR434","executionInfo":{"status":"ok","timestamp":1718461406011,"user_tz":-120,"elapsed":16089,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"99dc7629-e11f-4f0e-ed56-5ace8a499a60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree (BoW) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.62      0.63      0.62      1353\n","           1       0.57      0.56      0.56      1187\n","\n","    accuracy                           0.60      2540\n","   macro avg       0.59      0.59      0.59      2540\n","weighted avg       0.60      0.60      0.60      2540\n","\n","Decision Tree (TF-IDF) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.59      0.62      0.60      1353\n","           1       0.54      0.51      0.53      1187\n","\n","    accuracy                           0.57      2540\n","   macro avg       0.57      0.57      0.57      2540\n","weighted avg       0.57      0.57      0.57      2540\n","\n"]}]},{"cell_type":"markdown","source":["4. Random Forest (RF)"],"metadata":{"id":"V32c5iPiSCUI"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# Using BoW Features\n","rf_bow = RandomForestClassifier()\n","rf_bow.fit(X_train_bow, y_train)\n","y_pred_rf_bow = rf_bow.predict(X_test_bow)\n","print(\"Random Forest (BoW) Classification Report:\")\n","print(classification_report(y_test, y_pred_rf_bow))\n","\n","# Using TF-IDF Features\n","rf_tfidf = RandomForestClassifier()\n","rf_tfidf.fit(X_train_tfidf, y_train)\n","y_pred_rf_tfidf = rf_tfidf.predict(X_test_tfidf)\n","print(\"Random Forest (TF-IDF) Classification Report:\")\n","print(classification_report(y_test, y_pred_rf_tfidf))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pDGk26ZxSC6y","executionInfo":{"status":"ok","timestamp":1718461508209,"user_tz":-120,"elapsed":89042,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"d21d92f4-2ae6-4b1c-e45d-b0f0f857f9b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest (BoW) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.63      0.83      0.72      1353\n","           1       0.70      0.45      0.55      1187\n","\n","    accuracy                           0.65      2540\n","   macro avg       0.67      0.64      0.63      2540\n","weighted avg       0.67      0.65      0.64      2540\n","\n","Random Forest (TF-IDF) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.63      0.77      0.69      1353\n","           1       0.65      0.49      0.56      1187\n","\n","    accuracy                           0.64      2540\n","   macro avg       0.64      0.63      0.63      2540\n","weighted avg       0.64      0.64      0.63      2540\n","\n"]}]},{"cell_type":"markdown","source":["5. K-Nearest Neighbors (KNN)"],"metadata":{"id":"zdbqKtdESHXw"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","\n","# Using BoW Features\n","knn_bow = KNeighborsClassifier()\n","knn_bow.fit(X_train_bow, y_train)\n","y_pred_knn_bow = knn_bow.predict(X_test_bow)\n","print(\"K-Nearest Neighbors (BoW) Classification Report:\")\n","print(classification_report(y_test, y_pred_knn_bow))\n","\n","# Using TF-IDF Features\n","knn_tfidf = KNeighborsClassifier()\n","knn_tfidf.fit(X_train_tfidf, y_train)\n","y_pred_knn_tfidf = knn_tfidf.predict(X_test_tfidf)\n","print(\"K-Nearest Neighbors (TF-IDF) Classification Report:\")\n","print(classification_report(y_test, y_pred_knn_tfidf))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zks1tRHoSJRY","executionInfo":{"status":"ok","timestamp":1718461530709,"user_tz":-120,"elapsed":16144,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"35bf4f91-5926-415b-84a7-c7b917cfc166"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["K-Nearest Neighbors (BoW) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.57      0.31      0.40      1353\n","           1       0.48      0.74      0.58      1187\n","\n","    accuracy                           0.51      2540\n","   macro avg       0.53      0.52      0.49      2540\n","weighted avg       0.53      0.51      0.49      2540\n","\n","K-Nearest Neighbors (TF-IDF) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.60      0.69      0.64      1353\n","           1       0.57      0.48      0.52      1187\n","\n","    accuracy                           0.59      2540\n","   macro avg       0.59      0.58      0.58      2540\n","weighted avg       0.59      0.59      0.58      2540\n","\n"]}]},{"cell_type":"markdown","source":["### Support Vector Machine (SVM)"],"metadata":{"id":"35rGf3dSQ6zx"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","\n","# Using BoW Features\n","svm_bow = SVC(kernel='linear')\n","svm_bow.fit(X_train_bow, y_train)\n","y_pred_svm_bow = svm_bow.predict(X_test_bow)\n","print(\"Support Vector Machine (BoW) Classification Report:\")\n","print(classification_report(y_test, y_pred_svm_bow))\n","\n","# Using TF-IDF Features\n","svm_tfidf = SVC(kernel='linear')\n","svm_tfidf.fit(X_train_tfidf, y_train)\n","y_pred_svm_tfidf = svm_tfidf.predict(X_test_tfidf)\n","print(\"Support Vector Machine (TF-IDF) Classification Report:\")\n","print(classification_report(y_test, y_pred_svm_tfidf))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wxGehTDONEY5","executionInfo":{"status":"ok","timestamp":1718461776994,"user_tz":-120,"elapsed":113917,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"23174cb1-768c-4760-d8ab-4f65d294a585"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Support Vector Machine (BoW) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.65      0.66      0.65      1353\n","           1       0.60      0.59      0.60      1187\n","\n","    accuracy                           0.63      2540\n","   macro avg       0.62      0.62      0.62      2540\n","weighted avg       0.63      0.63      0.63      2540\n","\n","Support Vector Machine (TF-IDF) Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.67      0.68      0.68      1353\n","           1       0.63      0.62      0.62      1187\n","\n","    accuracy                           0.65      2540\n","   macro avg       0.65      0.65      0.65      2540\n","weighted avg       0.65      0.65      0.65      2540\n","\n"]}]},{"cell_type":"markdown","source":["# Visualisation"],"metadata":{"id":"IAUJpWoFPOS-"}},{"cell_type":"code","source":["pip install matplotlib seaborn scikit-learn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H1AoG4n2PKsn","executionInfo":{"status":"ok","timestamp":1718460702505,"user_tz":-120,"elapsed":15481,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"c9a57114-6caa-43ec-801b-17b91f95e3f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (2.0.3)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","\n","# Load the dataset\n","preprocessed_data = pd.read_excel('preprocessed_data.xlsx')\n","tweets = preprocessed_data['text']\n","labels = preprocessed_data['gender']\n","\n","# Handle missing values\n","preprocessed_data.dropna(subset=['text', 'gender'], inplace=True)\n","tweets = preprocessed_data['text']\n","labels = preprocessed_data['gender']\n","\n","# Split the dataset into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(tweets, labels, test_size=0.2, random_state=42)\n","\n","# Initialize vectorizers for BoW and TF-IDF\n","vectorizer_bow = CountVectorizer()\n","vectorizer_tfidf = TfidfVectorizer()\n","\n","# Transform the data\n","X_train_bow = vectorizer_bow.fit_transform(X_train)\n","X_test_bow = vectorizer_bow.transform(X_test)\n","X_train_tfidf = vectorizer_tfidf.fit_transform(X_train)\n","X_test_tfidf = vectorizer_tfidf.transform(X_test)\n","\n","# Initialize classifiers\n","classifiers = {\n","    'Naive Bayes': MultinomialNB(),\n","    'Logistic Regression': LogisticRegression(max_iter=1000),\n","    'Decision Tree': DecisionTreeClassifier(),\n","    'Random Forest': RandomForestClassifier(),\n","    'K-Nearest Neighbors': KNeighborsClassifier(),\n","    'SVM': SVC(kernel='linear')\n","}\n","\n","# Lists to store accuracy scores\n","accuracy_scores_bow = []\n","accuracy_scores_tfidf = []\n","\n","# Train and evaluate each model using BoW and TF-IDF features\n","for clf_name, clf in classifiers.items():\n","    # Using BoW Features\n","    if 'SVM' in clf_name:\n","        clf_bow = SVC(kernel='linear')\n","    else:\n","        clf_bow = clf\n","\n","    clf_bow.fit(X_train_bow, y_train)\n","    y_pred_bow = clf_bow.predict(X_test_bow)\n","    accuracy_bow = accuracy_score(y_test, y_pred_bow)\n","    accuracy_scores_bow.append(accuracy_bow)\n","\n","    # Using TF-IDF Features\n","    if 'SVM' in clf_name:\n","        clf_tfidf = SVC(kernel='linear')\n","    else:\n","        clf_tfidf = clf\n","\n","    clf_tfidf.fit(X_train_tfidf, y_train)\n","    y_pred_tfidf = clf_tfidf.predict(X_test_tfidf)\n","    accuracy_tfidf = accuracy_score(y_test, y_pred_tfidf)\n","    accuracy_scores_tfidf.append(accuracy_tfidf)\n","\n","# Plotting the graphs\n","fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))\n","\n","# BoW Accuracy Plot\n","ax1.barh(list(classifiers.keys()), accuracy_scores_bow, color='skyblue')\n","ax1.set_xlim(0.5, 1.0)  # Adjust the x-axis limits if necessary\n","ax1.set_xlabel('Accuracy')\n","ax1.set_title('Accuracy of Models using Bag of Words (BoW)')\n","for i, v in enumerate(accuracy_scores_bow):\n","    ax1.text(v + 0.01, i, f'{v*100:.1f}%', va='center')\n","\n","# TF-IDF Accuracy Plot\n","ax2.barh(list(classifiers.keys()), accuracy_scores_tfidf, color='lightgreen')\n","ax2.set_xlim(0.5, 1.0)  # Adjust the x-axis limits if necessary\n","ax2.set_xlabel('Accuracy')\n","ax2.set_title('Accuracy of Models using TF-IDF')\n","for i, v in enumerate(accuracy_scores_tfidf):\n","    ax2.text(v + 0.01, i, f'{v*100:.1f}%', va='center')\n","\n","plt.tight_layout()\n","plt.show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":416},"id":"797EoLr4WCNf","executionInfo":{"status":"ok","timestamp":1718462678112,"user_tz":-120,"elapsed":217416,"user":{"displayName":"Vishmi Kavindya","userId":"01564075537323612864"}},"outputId":"031c5d4c-2e8d-406b-a400-6e1c1939773d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}